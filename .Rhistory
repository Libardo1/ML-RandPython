trainTestSplit <- function(df,trainPercent,seed1){
## Sample size percent
samp_size <- floor(trainPercent/100 * nrow(df))
## set the seed to make your partition reproductible
## set the seed to make your partition reproductible
set.seed(seed1)
idx <- sample(seq_len(nrow(df)), size = samp_size)
idx
}
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
fit=lm(medv~lstat,data=df)
fit
summary(fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
predict(fit,data.frame(lstat=(c(5,10,15))), interval="prediction")
plot(df$lstat,df$medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
abline(fit,lwd=3)
abline(fit,lwd=3,col="red")
summary(lm.fit)
summary(fit)
pred<-predict(fit,data.frame=test)
length(pred)
pred<-predict(fit,data.frame=c(1,2,3))
length(pred)
pred
?predict
pred<-predict(fit,test)
pred<-predict(fit,newdata=test)
length(pred)
length(test)
dim(test)
pred
dim(pred)
actual <- test$medv
length(actual)
errors <- actual - pred
errors
class(errors)
sum(pred - mean(actual))/sum(actual - mean(actual))
(sum(pred - mean(actual)))^2/(sum(actual - mean(actual)))^2
errors <- sum((actual - pred)^2)
errors
TSS <- sum((actual - mean(actual))^2)
RSS <- sum((actual - pred)^2)
TSS <- sum((actual - mean(actual))^2)
rsquared <-1 - (RSS/TSS)
rsquared
summar(fit)
summary(fit)
qqplot(fit)
fit=lm(medv~lstat,data=df)
qqplot(fit)
qqnorm(df$lstat); qqline(df$lstat)
plot(summary())
plot(summary
)
plot(fit)
crimesDF <- read.csv("crimes.csv",stringsAsFactors = FALSE)
names(crimesDF)
crimesDF1 <- crimesDF[,7:length(crimesDF)]
crimesDF2 <- sapply(crimesDF1,as.numeric)
a <- is.na(crimesDF2)
crimesDF2[a] <-0
crimesDF2 <- as.data.frame(crimesDF2)
train_idx <- trainTestSplit(crimesDF2,trainPercent=75,seed=5)
train <- crimesDF2[train_idx, ]
test <- crimesDF2[-train_idx, ]
fit <- lm(ViolentCrimesPerPop~.,data=train)
summary(fit)
lm.fiit2=lm(medv~poly(.,5))
lm.fiit2=lm(medv~poly(.,5),data=train)
fit <- lm(ViolentCrimesPerPop~poly(.,2),data=train)
names(train)
fit <- lm(ViolentCrimesPerPop~poly(householdsize,2),data=train)
fit <- lm(ViolentCrimesPerPop~poly(.,2),data=train)
?poly
names(train)
names(train)[1:122]
names(train)[1:122]
names(train)[1:123]
names(train)[1:122]
fit <- lm(ViolentCrimesPerPop~poly(names(train)[1:122],2),data=train)
a=names(train)[1:122]
a
poly(train$population,2)
poly(train,2)
poly(,2)
fit <- lm(ViolentCrimesPerPop~poly(as.matrix(train[1:122],2)),data=train)
fit <- lm(ViolentCrimesPerPop~poly(as.matrix(train[1:3],2)),data=train)
fit <- lm(ViolentCrimesPerPop~poly(as.matrix(train[1:120],2)),data=train)
View(train)
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
fit=lm(medv~lstat,data=df)
fit
summary(fit)
names(fit)
coef(fit)
confint(fit)
predict(fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
predict(fit,data.frame(lstat=(c(5,10,15))), interval="prediction")
plot(df$lstat,df$medv)
abline(fit)
abline(fit,lwd=3)
abline(fit,lwd=3,col="red")
summary(fit)
poly(df$medv,2)
a=poly(df$medv,2)
class(a)
a
a[1:20]
poly(df,2)
poly(as.matrix(train[1:120],2))
crimesDF <- read.csv("crimes.csv",stringsAsFactors = FALSE)
names(crimesDF)
crimesDF1 <- crimesDF[,7:length(crimesDF)]
crimesDF2 <- sapply(crimesDF1,as.numeric)
a <- is.na(crimesDF2)
crimesDF2[a] <-0
crimesDF2 <- as.data.frame(crimesDF2)
train_idx <- trainTestSplit(crimesDF2,trainPercent=75,seed=5)
train <- crimesDF2[train_idx, ]
test <- crimesDF2[-train_idx, ]
fit <- lm(ViolentCrimesPerPop~poly(names(train)[1:122],2),data=train)
poly(as.matrix(train[1:120],2))
poly(as.matrix(train[1:10],2))
fit <- lm(ViolentCrimesPerPop~poly(as.matrix(train[1:10]),2)
)
fit <- lm(ViolentCrimesPerPop~poly(as.matrix(train[1:10]),2),data=train)
dim(crimesDF2)
View(crimesDF2)
names(crimesDF2)
poly(as.matrix(crimesDF2[1:122],2))
crimesDF2[1:122]
poly(crimesDF2[1:122],2)
x=as.matrix(crimesDF2[1:122])
poly(x,2)
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
dim(df)
names(df)
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
dim(df)
names(df)
head(df)
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
fit=lm(medv~.,data=df)
fit
summary(fit)
names(df)
x=as.matrix(df[1:length(df)-1])
length(df)
x=as.matrix(df[1:length(df)-1])
dim(x)
X
fit <- lm(medv~ poly(x,2),data=df)
fit <- lm(medv~ poly(x,2,raw=TRUE),data=df)
summary(fit)
dim(x)
X_poly=as.matrix(df[1:length(df)])
dim(X_poly)
dim(X)
dim(df)
X_poly=poly(as.matrix(df[1:length(df)]),2,raw=TRUE)
dim(X_poly)
x=as.matrix(df[1:length(df)-1])
dim(x)
dim(df)
X_poly=poly(x,2,raw=TRUE)
dim(X_poly)
fit <- lm(medv~X_poly,data=df)
summary(fit)
dim(X_poly)
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
x=as.matrix(train[1:length(train)-1])
X_poly=poly(x,2,raw=TRUE)
fit <- lm(medv~ poly(x,2,raw=TRUE),data=train)
summary(fit)
x_train=as.matrix(train[1:length(train)-1])
X_train_poly=poly(x_train,2,raw=TRUE)
fit <- lm(medv~ X_train_poly,data=train)
summary(fit)
x_test=as.matrix(test[1:length(test)-1])
X_test_poly=poly(x_test,2,raw=TRUE)
Rsquared(fit,X_test_poly,test$medv)
Rsquared <- function(lmfit,newdf,y){
yhat <- predict(lmfit,newdata=newdf)
RSS <- sum((y - yhat)^2)
TSS <- sum((y - mean(y))^2)
rsquared <-1 - (RSS/TSS)
rsquared
}
Rsquared(fit,X_test_poly,test$medv)
dim(X_test_poly)
length(test$medv)
yhat <- predict(fit,newdata=test)
fit <- lm(medv~ X_train_poly,data=train)
yhat <- predict(fit,newdata=test)
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
x_train=as.matrix(train[1:length(train)-1])
X_train_poly=poly(x_train,2,raw=TRUE)
fit <- lm(medv~ X_train_poly,data=train)
summary(fit)
yhat <- predict(fit,newdata=test)
yhat <- predict(fit,newdata=train)
dim(train)
dim(test)
dim(X_train_poly)
dim(X_test_poly)
yhat <- predict(fit,newdata=X_test_poly)
RSS <- sum((y - yhat)^2)
Rsquared(fit,X_test_poly,test$medv)
Rsquared(fit,X_test_poly,test$medv)
fit <- lm(medv~ X_train_poly,data=train)
summary(fit)
yhat <- predict(fit,newdata=X_train_poly)
yhat
y=train$medv
RSS <- sum((y - yhat)^2)
TSS <- sum((y - mean(y))^2)
rsquared <-1 - (RSS/TSS)
rsquared
x_test=as.matrix(test[1:length(test)-1])
X_test_poly=poly(x_test,2,raw=TRUE)
yhat <- predict(fit,newdata=X_test_poly)
y=test$medv
RSS <- sum((y - yhat)^2)
TSS <- sum((y - mean(y))^2)
rsquared <-1 - (RSS/TSS)
rsquared
length(y)
length(yhat)
dim(X_test_poly)
yhat <- predict(fit,newdata=X_test_poly)
dim(yhat)
length(yhat)
yhat <- predict(fit,newdata=X_train_poly)
length(yhat)
length(train$medv)
test$medv
length(test$medv)
length(X_test_poly)
dim(x_test)
x_test=as.matrix(test[1:length(test)-1])
X_test_poly=poly(x_test,2,raw=TRUE)
dim(X_test_poly)
Rsquared(fit,X_test_poly,test$medv)
yhat <- predict(fit,newdata=X_test_poly)
length(yhat)
y=test$medv
length(y)
length(X_test_poly)
x_test=as.matrix(test[1:length(test)-1])
X_test_poly=poly(x_test,2,raw=TRUE)
length(X_test_poly)
rm(list=ls())
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
x_train=as.matrix(train[1:length(train)-1])
X_train_poly=poly(x_train,2,raw=TRUE)
fit <- lm(medv~ X_train_poly,data=train)
x_test=as.matrix(test[1:length(test)-1])
X_test_poly=poly(x_test,2,raw=TRUE)
x_test=as.matrix(test[1:length(test)-1])
test <- df[-train_idx, ]
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
trainTestSplit <- function(df,trainPercent,seed1){
## Sample size percent
samp_size <- floor(trainPercent/100 * nrow(df))
## set the seed to make your partition reproductible
## set the seed to make your partition reproductible
set.seed(seed1)
idx <- sample(seq_len(nrow(df)), size = samp_size)
idx
}
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
x_train=as.matrix(train[1:length(train)-1])
X_train_poly=poly(x_train,2,raw=TRUE)
fit <- lm(medv~ X_train_poly,data=train)
summary(fit)
x_test=as.matrix(test[1:length(test)-1])
X_test_poly=poly(x_test,2,raw=TRUE)
yhat <- predict(fit,newdata=X_test_poly)
length(yhat)
y=test$medv
length(y)
dim(X_test_poly)
yhat <- predict(fit,newdata=X_test_poly)
length(yhat)
a=predict(fit,newdata=X_test_poly)
length(a)
dim(df)
predict(fit,newdata=df)
a=predict(fit,newdata=df)
dim(a)
length(a)
yhat <- predict(fit,newdata=X_test_poly[1:10,])
yhat <- predict(fit,newdata=X_test_poly[1:10,])
yhat <- predict(fit,newdata=X_test_poly)
yhat <- predict(fit,newdata=test)
length(yhat)
dim(train)
dim(test)
dim(df)
df1 = as.matrix(df[1:14])
**************************************
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
x = as.matrix(df[1:14])
x_poly=poly(x,2,raw=TRUE)
dim(x_poly)
df1=as.dataframe(poly(x,2,raw=TRUE))
df1=as.data.frame(poly(x,2,raw=TRUE))
dim(df1)
df2 <- cbin(df1,df[15])
df2 <- cbind(df1,df[15])
dim(df2)
names(df2)
train_idx <- trainTestSplit(df2,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
dim(train)
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
x = as.matrix(df[1:14])
df1=as.data.frame(poly(x,2,raw=TRUE))
df2 <- cbind(df1,df[15])
train_idx <- trainTestSplit(df2,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
train <- df2[train_idx, ]
test <- df2[-train_idx, ]
dim(train)
dim(test)
fit <- lm(medv~as.matrix(train[1:135]) ,data=train)
summary(fit)
yhat <- predict(fit,newdata=test)
dim(test)
names(train)
names(test)
yhat <- predict(fit,newdata=as.matrix(test))
fit <- lm(medv~train[1:135] ,data=train)
fit <- lm(medv~as.data.frame(train[1:135]) ,data=train)
fit <- lm(medv~as.matrix(train[1:135]) ,data=train)
fit <- lm(medv~as.matrix(train[1:135]) ,data=train)
summary(fit)
train=test
dim(train)
yhat <- predict(fit,newdata=train)
length(yhat)
y=test$medv
RSS <- sum((y - yhat)^2)
TSS <- sum((y - mean(y))^2)
rsquared <-1 - (RSS/TSS)
rsquared
Rsquared <- function(lmfit,newdf,y){
yhat <- predict(lmfit,newdata=newdf)
RSS <- sum((y - yhat)^2)
TSS <- sum((y - mean(y))^2)
rsquared <-1 - (RSS/TSS)
rsquared
}
=
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
x = as.matrix(df[1:14])
df1=as.data.frame(poly(x,2,raw=TRUE))
df2 <- cbind(df1,df[15])
train_idx <- trainTestSplit(df2,trainPercent=75,seed=5)
train <- df2[train_idx, ]
test <- df2[-train_idx, ]
x_train=as.matrix(train[1:length(train)-1])
X_train_poly=poly(x_train,2,raw=TRUE)
fit <- lm(medv~as.matrix(train[1:135]) ,data=train)
summary(fit)
Rsquared(fit,X_test_poly,test$medv)
train=test
Rsquared(fit,train,test$medv)
train=test
Rsquared(fit,train,test$medv)
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
x = as.matrix(df[1:14])
df1=as.data.frame(poly(x,5,raw=TRUE))
df1=as.data.frame(poly(x,5,raw=TRUE))
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
x = as.matrix(df[1:14])
df1=as.data.frame(poly(x,3,raw=TRUE))
df=read.csv("Boston.csv",stringsAsFactors = FALSE) # Data from MASS - SL
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
fit <- lm(medv~. ,data=train)
summary(fit)
train=test
Rsquared(fit,train,test$medv)
?Boston
auto_copy()
auto
mtcars
dim(mtcars)
df=read.csv("auto_mpg.csv.csv",stringsAsFactors = FALSE) # Data from UCI
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
dim(df)
names(df)
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
dim(df)
View(df)
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
dim(df)
View(df)
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
fit <- lm(mpg~. ,data=train)
summary(fit)
train=test
Rsquared(fit,train,test$medv)
sapply(df,class)
df1 <- sapply(df,as.numeric)
View(df1)
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
df1 <- df %>% select(cylinder,displacement, horsepower,weight, acceleration, year)
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
names(df)
df1 <- df %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
df1 <- df %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
df1 <- sapply(df,as.numeric)
names(df1)
names(df)
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
df1 <- sapply(df,as.numeric)
df1
dim(df1)
names(df1)
df1[1:2,]
df[1:2,]
dim(df)
dim(df1)
names(df1)
names(df)
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
df1 <- sapply(df,as.numeric)
names(df1) <- names(df)
df1 <- df %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
names(df1)
F
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
df1 <- sapply(df,as.numeric)
dim(df1)
names(df1)
class(df1)
df1 <- as.data.frame(sapply(df,as.numeric))
dim(df1)
names(df1)
df1 <- df %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
df1 <- df1 %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
df1 <- as.data.frame(sapply(df,as.numeric))
dim(df1)
names(df1)
df2 <- df1 %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
select(df1,cylinder,displacement, horsepower,weight, acceleration, year,mpg)
class(df1)
View(df1)
library(dplyr)
df2 <- df1 %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
library(MASS)
mtcars
dim(mtcars)
remove(MASS)
remove.packages(MASS, lib)
remove.packages("MASS", lib)
?remove.packages
remove.packages(pkgs, lib)
remove.packages(c("MASS"), lib)
install.packages("dplyr")
install.packages("dplyr")
remove.packages(c("MASS"),"C:\Users\Ganesh\AppData\Local\Temp\RtmpCGo0Ny\downloaded_packages")
remove.packages(c("MASS"),"C:\Users\Ganesh\AppData\Local\Temp\RtmpCGo0Ny\downloaded_packages")
remove.packages(c("MASS"),"C:\\Users\\Ganesh\\AppData\\Local\Temp\\RtmpCGo0Ny\\downloaded_packages")
remove.packages(c("MASS"),"C:\\Users\\Ganesh\\AppData\\Local\\Temp\\RtmpCGo0Ny\\downloaded_packages")
remove.packages("MASS","C:\\Users\\Ganesh\\AppData\\Local\\Temp\\RtmpCGo0Ny\\downloaded_packages")
df2 <- df1 %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
df=read.csv("auto_mpg.csv",stringsAsFactors = FALSE) # Data from UCI
df1 <- as.data.frame(sapply(df,as.numeric))
df2 <- df1 %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
library(dplyr)
df2 <- df1 %>% select(cylinder,displacement, horsepower,weight, acceleration, year,mpg)
train_idx <- trainTestSplit(df,trainPercent=75,seed=5)
train <- df[train_idx, ]
test <- df[-train_idx, ]
fit <- lm(mpg~. ,data=train)
summary(fit)
